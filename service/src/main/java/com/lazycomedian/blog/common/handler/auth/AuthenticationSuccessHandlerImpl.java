package com.lazycomedian.blog.common.handler.auth;import com.alibaba.fastjson.JSON;import com.lazycomedian.blog.dto.user.UserDetailDTO;import com.lazycomedian.blog.dto.user.UserInfoDTO;import com.lazycomedian.blog.entity.UserAuthEntity;import com.lazycomedian.blog.mapper.UserAuthMapper;import com.lazycomedian.blog.utils.BeanCopyUtils;import com.lazycomedian.blog.utils.UserUtils;import com.lazycomedian.blog.vo.response.Result;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.scheduling.annotation.Async;import org.springframework.security.core.Authentication;import org.springframework.security.web.authentication.AuthenticationSuccessHandler;import org.springframework.stereotype.Component;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import static com.lazycomedian.blog.constants.CommonConst.APPLICATION_JSON;/** * 登录成功处理 * * @author lazyComedian * @date 2022/6/29 16:57 **/@Componentpublic class AuthenticationSuccessHandlerImpl implements AuthenticationSuccessHandler {    @Autowired    private UserAuthMapper userAuthMapper;    @Override    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication e) throws IOException, ServletException {        // 返回登录信息        UserInfoDTO userInfo = BeanCopyUtils.assign(UserUtils.getLoginUser(), UserInfoDTO.class);        response.setContentType(APPLICATION_JSON);        response.getWriter().write(JSON.toJSONString(Result.ok(userInfo)));        // 更新用户ip，最近登录时间        updateUserInfo();    }    /**     * 更新用户时间     */    @Async    public void updateUserInfo() {        UserDetailDTO loginUser = UserUtils.getLoginUser();                UserAuthEntity userAuth = UserAuthEntity.builder()                .id(loginUser.getId())                .ipAddress(loginUser.getIpAddress())                .ipSource(loginUser.getIpSource())                .lastLoginTime(loginUser.getLastLoginTime())                .build();        userAuthMapper.updateById(userAuth);    }}