package com.lazycomedian.blog.config;import com.lazycomedian.blog.common.handler.auth.*;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.config.annotation.ObjectPostProcessor;import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.core.session.SessionRegistry;import org.springframework.security.core.session.SessionRegistryImpl;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource;import org.springframework.security.web.access.intercept.FilterSecurityInterceptor;import org.springframework.security.web.session.HttpSessionEventPublisher;/** * @author lazyComedian * @date 2022/6/29 16:19 **/@Configuration@EnableWebSecurity@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)public class WebSecurityConfig extends WebSecurityConfigurerAdapter {    /**     * 未登录处理     */    @Autowired    private AuthenticationEntryPointImpl authenticationEntryPoint;    @Autowired    private AuthenticationSuccessHandlerImpl authenticationSuccessHandler;    @Autowired    private AuthenticationFailHandlerImpl authenticationFailHandler;    @Autowired    private LogoutSuccessHandlerImpl logoutSuccessHandler;    @Bean    public FilterInvocationSecurityMetadataSource securityMetadataSource() {        return new FilterInvocationSecurityMetadataSourceImpl();    }    @Bean    public SessionRegistry sessionRegistry() {        return new SessionRegistryImpl();    }    @Bean    public HttpSessionEventPublisher httpSessionEventPublisher() {        return new HttpSessionEventPublisher();    }    /**     * 密码加密     * 为用户密码进行加密，确保sq取值正确     *     * @return {@link PasswordEncoder} 加密方式     */    @Bean    public PasswordEncoder passwordEncoder() {        return new BCryptPasswordEncoder();    }    @Override    protected void configure(HttpSecurity http) throws Exception {        // 配置登录注销路径        http.formLogin()                .loginProcessingUrl("/login")                .successHandler(authenticationSuccessHandler)                .failureHandler(authenticationFailHandler)                .and()                .logout()                .logoutUrl("/logout")                .logoutSuccessHandler(logoutSuccessHandler);        // 配置路由权限信息        http.authorizeRequests()                .withObjectPostProcessor(new ObjectPostProcessor<FilterSecurityInterceptor>() {                    @Override                    public <O extends FilterSecurityInterceptor> O postProcess(O fsi) {                        fsi.setSecurityMetadataSource(securityMetadataSource());//                        fsi.setAccessDecisionManager(accessDecisionManager());                        return fsi;                    }                })                .anyRequest().permitAll()                .and()                // 关闭跨站请求防护                .csrf().disable().exceptionHandling()                // 未登录处理                .authenticationEntryPoint(authenticationEntryPoint)                .and()                .sessionManagement()                .maximumSessions(20)                .sessionRegistry(sessionRegistry());    }}