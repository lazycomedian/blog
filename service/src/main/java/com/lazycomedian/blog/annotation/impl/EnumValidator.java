package com.lazycomedian.blog.annotation.impl;import com.google.common.collect.Lists;import com.lazycomedian.blog.annotation.validation.EnumValid;import com.lazycomedian.blog.common.excption.BizException;import com.lazycomedian.blog.enums.StatusCodeEnum;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.BeanUtils;import javax.validation.ConstraintValidator;import javax.validation.ConstraintValidatorContext;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;import java.util.List;/** * 枚举校验 * * <p> * 注意： * <p> * 1、ConstraintValidator<Enum, Object> * <p> * 第一个参数：是我们自定义的校验注解，此处是 Enum，是因为我们上方自定义的注解就是 @interface Enum 。 * 第二个参数：指的是页面上传递过来的具体的数据的类型。 * <p> * 2、如果我们的LocalValidatorFactoryBean是SpringConstraintValidatorFactory，那么在我们的验证类中可以使用Spring的依赖注入。 * <p> * 3、isValid 方法需要保证线程安全，因为它可能是多线程调用。 * * @author lazyComedian * @date 2022/6/29 09:37 **/@Slf4jpublic class EnumValidator implements ConstraintValidator<EnumValid, Object> {    // 存具体枚举的值    private final List<Object> values = Lists.newArrayList();    @Override    public void initialize(EnumValid constraintAnnotation) {        Class<?> enumClazz = constraintAnnotation.value();        Object[] enumConstants = enumClazz.getEnumConstants();        if (null == enumConstants) return;        Method method = BeanUtils.findMethod(enumClazz, constraintAnnotation.keyword());        if (null == method) {            log.warn("枚举对象:[{}]中不存在方法:[{}],请检查.", enumClazz.getName(), constraintAnnotation.keyword());            throw new BizException(StatusCodeEnum.VALID_ERROR.getCode(), "枚举对象中不存在获取值的方法");        }        method.setAccessible(true);        try {            for (Object enumConstant : enumConstants) {                values.add(method.invoke(enumConstant));            }        } catch (IllegalAccessException | InvocationTargetException e) {            log.warn("获取枚举类:[{}]的枚举对象的值失败.", enumClazz);            throw new BizException(StatusCodeEnum.VALID_ERROR.getCode(), "获取枚举值失败");        }    }    @Override    public boolean isValid(Object value, ConstraintValidatorContext context) {        return null == value || values.contains(value);    }}