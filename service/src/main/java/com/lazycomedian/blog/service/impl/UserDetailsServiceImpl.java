package com.lazycomedian.blog.service.impl;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.core.toolkit.StringUtils;import com.lazycomedian.blog.common.excption.BizException;import com.lazycomedian.blog.dto.user.UserDetailDTO;import com.lazycomedian.blog.entity.UserAuthEntity;import com.lazycomedian.blog.entity.UserInfoEntity;import com.lazycomedian.blog.enums.StatusCodeEnum;import com.lazycomedian.blog.enums.ZoneEnum;import com.lazycomedian.blog.mapper.UserAuthMapper;import com.lazycomedian.blog.mapper.UserInfoMapper;import com.lazycomedian.blog.utils.IpUtils;import eu.bitwalker.useragentutils.UserAgent;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.stereotype.Service;import org.springframework.util.ObjectUtils;import javax.annotation.Resource;import javax.servlet.http.HttpServletRequest;import java.time.LocalDateTime;import java.time.ZoneId;/** * 用户鉴权实现 * * @author lazyComedian * @date 2022/6/30 16:06 **/@Servicepublic class UserDetailsServiceImpl implements UserDetailsService {    @Autowired    private UserAuthMapper userAuthMapper;    @Autowired    private UserInfoMapper userInfoMapper;    @Resource    private HttpServletRequest request;    @Override    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {        if (StringUtils.isBlank(username)) throw new BizException("用户名不能为空");        UserAuthEntity user = userAuthMapper.selectOne(new LambdaQueryWrapper<UserAuthEntity>()                .select(UserAuthEntity::getId, UserAuthEntity::getUsername, UserAuthEntity::getPassword,                        UserAuthEntity::getStatus, UserAuthEntity::getUserInfoId)                .eq(UserAuthEntity::getUsername, username)        );        // 查询账号是否存在        if (ObjectUtils.isEmpty(user)) throw new BizException(StatusCodeEnum.USERNAME_NOT_EXIST);        return convertUserDetail(user, request);    }    public UserDetailDTO convertUserDetail(UserAuthEntity user, HttpServletRequest request) {        // 获取用户信息表信息        UserInfoEntity userInfo = userInfoMapper.selectById(user.getUserInfoId());        // 获取设备信息        String ipAddress = IpUtils.getIpAddress(request);        String ipSource = IpUtils.getIpSource(ipAddress);        UserAgent userAgent = IpUtils.getUserAgent(request);        return UserDetailDTO.builder()                .id(user.getId())                .username(user.getUsername())                .password(user.getPassword())                .status(user.getStatus())                .email(userInfo.getEmail())                .userInfoId(userInfo.getId())                .nickname(userInfo.getNickname())                .avatar(userInfo.getAvatar())                .intro(userInfo.getIntro())                .ipAddress(ipAddress)                .ipSource(ipSource)                .lastLoginTime(LocalDateTime.now(ZoneId.of(ZoneEnum.SHANGHAI.getZone())))                .build();    }}